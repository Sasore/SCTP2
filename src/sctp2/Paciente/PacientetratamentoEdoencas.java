/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sctp2.Paciente;

import static java.awt.Frame.MAXIMIZED_BOTH;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import sctp2.Pesquisar.Pesquisar;

/**
 *
 * @author Adriano Local
 */
public class PacientetratamentoEdoencas extends javax.swing.JFrame {

    String iDpaciente;

    /**
     * Creates new form PacientetratamentoEdoencas
     */
    public PacientetratamentoEdoencas() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);//inicia a janela maximizada
    }

    public PacientetratamentoEdoencas(String idpaciente, String nome) throws ClassNotFoundException, SQLException {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);//inicia a janela maximizada
        iDpaciente = idpaciente;
        jNome.setText(nome);
        ListaTratamento();
        ListaDoencas();
        ListarAnamse();
        HabitosCigarro();
        HabitosBebida();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDoencas = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jNome = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPrincipalQueixa = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableSaude = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jBebida = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jFumante = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SCTP: Tratamento ");

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setForeground(new java.awt.Color(0, 50, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/left-arrow.png"))); // NOI18N
        jButton1.setText("Voltar");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 50, 255), 1, true));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tratamento Atual do paciente");

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 102, 255));
        jLabel2.setText("DoenÃ§as:  ");

        jTableDoencas.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jTableDoencas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableDoencas);
        if (jTableDoencas.getColumnModel().getColumnCount() > 0) {
            jTableDoencas.getColumnModel().getColumn(1).setMinWidth(40);
            jTableDoencas.getColumnModel().getColumn(1).setPreferredWidth(40);
            jTableDoencas.getColumnModel().getColumn(1).setMaxWidth(40);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 102, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Tratamento atual:");

        jTable1.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tratamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 102, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Fumante :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 102, 255));
        jLabel5.setText("Bebida AlcÃ³lica:");

        jNome.setEditable(false);
        jNome.setBackground(new java.awt.Color(204, 204, 204));
        jNome.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        jNome.setForeground(new java.awt.Color(255, 255, 255));
        jNome.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 102, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Nome");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 102, 255));
        jLabel7.setText("Principal Queixa: ");

        jPrincipalQueixa.setEditable(false);
        jPrincipalQueixa.setColumns(20);
        jPrincipalQueixa.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        jPrincipalQueixa.setRows(5);
        jScrollPane3.setViewportView(jPrincipalQueixa);

        jTableSaude.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jTableSaude.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableSaude);
        if (jTableSaude.getColumnModel().getColumnCount() > 0) {
            jTableSaude.getColumnModel().getColumn(0).setMinWidth(50);
            jTableSaude.getColumnModel().getColumn(0).setPreferredWidth(50);
        }

        jBebida.setEditable(false);
        jBebida.setColumns(20);
        jBebida.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        jBebida.setRows(5);
        jScrollPane5.setViewportView(jBebida);

        jFumante.setEditable(false);
        jFumante.setColumns(20);
        jFumante.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        jFumante.setRows(5);
        jScrollPane6.setViewportView(jFumante);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 102, 255));
        jLabel8.setText("SaÃºde");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(266, 266, 266)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel7)
                                .addComponent(jNome)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jNome, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addGap(8, 8, 8)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(15, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(7, 7, 7))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/detalhes.png"))); // NOI18N
        jMenu1.setText("Menu");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, 0));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/house pequena.png"))); // NOI18N
        jMenuItem1.setText("Menu Principal");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/fechar.png"))); // NOI18N
        jMenuItem2.setText("Sair");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1152, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        try {
            new sctp2.Paciente.DadosDoPaciente(iDpaciente).setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PacientetratamentoEdoencas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.setVisible(false);        // TODO add your handling code here:
        new sctp2.Principal.principal().setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PacientetratamentoEdoencas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PacientetratamentoEdoencas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PacientetratamentoEdoencas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PacientetratamentoEdoencas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PacientetratamentoEdoencas().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea jBebida;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextArea jFumante;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JTextField jNome;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextArea jPrincipalQueixa;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableDoencas;
    private javax.swing.JTable jTableSaude;
    // End of variables declaration//GEN-END:variables

    private void ListaTratamento() throws ClassNotFoundException, SQLException {
        sctp2.BancodeDados.conexao acesso = new sctp2.BancodeDados.conexao();
        ArrayList<sctp2.ClassesdeControle.TratamentosNecessarios> ListarPesquisa = new ArrayList<sctp2.ClassesdeControle.TratamentosNecessarios>();
        ListarPesquisa = acesso.NecessidadesdoPaciente(iDpaciente);//funÃ§Ã£o que retorna quais necessidades do paciente
        int[] tratamento = new int[27];

        tratamento[0] = ListarPesquisa.get(0).getProfilaxiaSimples();
        tratamento[1] = ListarPesquisa.get(0).getRaspagemEPoliCCoronario();
        tratamento[2] = ListarPesquisa.get(0).getCirugiaPeridontal();
        tratamento[3] = ListarPesquisa.get(0).getExodontiaSimples();
        tratamento[4] = ListarPesquisa.get(0).getExodontia3Molar();
        tratamento[5] = ListarPesquisa.get(0).getExodontiaIncluso();
        tratamento[6] = ListarPesquisa.get(0).getAmalgama();
        tratamento[7] = ListarPesquisa.get(0).getResina();
        tratamento[8] = ListarPesquisa.get(0).getRmf();
        tratamento[9] = ListarPesquisa.get(0).getEndontiaUnirradicular();
        tratamento[10] = ListarPesquisa.get(0).getEndodontiaTrirradicular();
        tratamento[11] = ListarPesquisa.get(0).getCoroaTotal();
        tratamento[12] = ListarPesquisa.get(0).getPonteFixa3Elementos();
        tratamento[13] = ListarPesquisa.get(0).getPonteFixa4Elementos();
        tratamento[14] = ListarPesquisa.get(0).getPonteFixaMaisQue4Elementos();
        tratamento[15] = ListarPesquisa.get(0).getPpr();
        tratamento[16] = ListarPesquisa.get(0).getProtesetotal();
        tratamento[17] = ListarPesquisa.get(0).getProtese_ppr();
        tratamento[18] = ListarPesquisa.get(0).getProtese();
        tratamento[19] = ListarPesquisa.get(0).getTerrapiaOeriodDeSuporte();
        tratamento[20] = ListarPesquisa.get(0).getEndodontiaBirradicular();
        tratamento[21] = ListarPesquisa.get(0).getDtm();
        tratamento[22] = ListarPesquisa.get(0).getEstomatologia();
        tratamento[23] = ListarPesquisa.get(0).getPonteFixa();
        tratamento[24] = ListarPesquisa.get(0).getPonteFixaMaisQueTresElementos();
        tratamento[25] = ListarPesquisa.get(0).getRaspagemSub();
        tratamento[26] = ListarPesquisa.get(0).getRaspagemSupra();

        DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();//criando a chave valor para o objeto tabela
        if (tratamento[0] == 1) {
            valor.addRow((new String[]{"Profilaxia Simples"}));
        }
        if (tratamento[1] == 1) {
            valor.addRow((new String[]{"Raspagem e Poli. CoronÃ¡rio "}));
        }
        if (tratamento[2] == 1) {
            valor.addRow((new String[]{"Cirugia Peridontal "}));
        }
        if (tratamento[3] == 1) {
            valor.addRow((new String[]{"Exodontia Simples"}));
        }
        if (tratamento[4] == 1) {
            valor.addRow((new String[]{"Exodontia 3Âº Molar"}));
        }
        if (tratamento[5] == 1) {
            valor.addRow((new String[]{"Exodontia Incluso"}));
        }
        if (tratamento[6] == 1) {
            valor.addRow((new String[]{"Amalgama "}));
        }
        if (tratamento[7] == 1) {
            valor.addRow((new String[]{"Resina "}));
        }
        if (tratamento[8] == 1) {
            valor.addRow((new String[]{"RMF"}));
        }
        if (tratamento[9] == 1) {
            valor.addRow((new String[]{"EndontiaUnirradicular"}));
        }
        if (tratamento[10] == 1) {
            valor.addRow((new String[]{"Endodontia Trirradicular"}));
        }
        if (tratamento[11] == 1) {
            valor.addRow((new String[]{"Coroa Total"}));
        }
        if (tratamento[12] == 1) {
            valor.addRow((new String[]{"PonteFixa 3 Elementos"}));
        }
        if (tratamento[13] == 1) {
            valor.addRow((new String[]{"PonteFixa 4 Elementos "}));
        }
        if (tratamento[14] == 1) {
            valor.addRow((new String[]{"PonteFixaMaisQue 4 Elementos "}));
        }
        if (tratamento[15] == 1) {
            valor.addRow((new String[]{"PPR "}));
        }
        if (tratamento[16] == 1) {
            valor.addRow((new String[]{"Protese total "}));
        }
        if (tratamento[17] == 1) {
            valor.addRow((new String[]{"Protese PPR "}));
        }
        if (tratamento[18] == 1) {
            valor.addRow((new String[]{"Protese "}));
        }
        if (tratamento[19] == 1) {
            valor.addRow((new String[]{"Terapia Periodontal "}));
        }
        if (tratamento[20] == 1) {
            valor.addRow((new String[]{" Endodontia Birradicular "}));
        }
        if (tratamento[21] == 1) {
            valor.addRow((new String[]{"DTM "}));
        }
        if (tratamento[22] == 1) {
            valor.addRow((new String[]{"Estomatologia"}));
        }
        if (tratamento[23] == 1) {
            valor.addRow((new String[]{"Ponte Fixa"}));
        }
        if (tratamento[24] == 1) {
            valor.addRow((new String[]{"Ponte Fixa Mais Que TrÃªs Elementos"}));
        }
        if (tratamento[25] == 1) {
            valor.addRow((new String[]{"Raspagem Sub"}));
        }
        if (tratamento[26] == 1) {
            valor.addRow((new String[]{"Raspagem Supra"}));
        }

    }

    private void ListaDoencas() throws ClassNotFoundException {
        sctp2.BancodeDados.conexao acesso = new sctp2.BancodeDados.conexao();
        ArrayList<sctp2.ClassesdeControle.DoencasSistemicas> ListarPesquisa = new ArrayList<sctp2.ClassesdeControle.DoencasSistemicas>();
        ListarPesquisa = acesso.DoencasdoPaciente(iDpaciente);//funÃ§Ã£o que retorna quais necessidades do paciente
        int[] doenca = new int[9];
        doenca[0] = ListarPesquisa.get(0).getFebreReumatica();
        doenca[1] = ListarPesquisa.get(0).getProblemasRenais();
        doenca[2] = ListarPesquisa.get(0).getProblemasRespiratorios();
        doenca[3] = ListarPesquisa.get(0).getReumatismo();
        doenca[4] = ListarPesquisa.get(0).getDiabetes();
        doenca[5] = ListarPesquisa.get(0).getHipertensaoArterial();
        doenca[6] = ListarPesquisa.get(0).getProblemasCardiacos();
        doenca[7] = ListarPesquisa.get(0).getProblemasGastricos();
        doenca[8] = ListarPesquisa.get(0).getProblemasAlergicos();
        DefaultTableModel valor = (DefaultTableModel) jTableDoencas.getModel();//criando a chave valor para o objeto tabela
        if (doenca[0] == 1) {
            valor.addRow((new String[]{"Febre ReumÃ¡tica"}));
        }
        if (doenca[1] == 1) {
            valor.addRow((new String[]{"Problemas Renais"}));
        }
        if (doenca[2] == 1) {
            valor.addRow((new String[]{"Problemas RespiratÃ³rios"}));
        }
        if (doenca[3] == 1) {
            valor.addRow((new String[]{"Reumatismo"}));
        }
        if (doenca[4] == 1) {
            valor.addRow((new String[]{"Diabetes"}));
        }
        if (doenca[5] == 1) {
            valor.addRow((new String[]{"HipertensÃ£o Arterial"}));
        }
        if (doenca[6] == 1) {
            valor.addRow((new String[]{"Problemas cardÃ­acos"}));
        }
        if (doenca[7] == 1) {
            valor.addRow((new String[]{"Problemas GÃ¡stricos"}));
        }
        if (doenca[8] == 1) {
            valor.addRow((new String[]{"Problemas AlÃ©rgicos"}));
        }

    }

    private void ListarAnamse() throws ClassNotFoundException, SQLException {
        sctp2.BancodeDados.conexao acesso = new sctp2.BancodeDados.conexao();
        ArrayList<sctp2.ClassesdeControle.Anamnese> ListarPesquisa = new ArrayList<sctp2.ClassesdeControle.Anamnese>();
        ListarPesquisa = acesso.ListarAnamnese(iDpaciente);//funÃ§Ã£o que retorna quais necessidades do paciente
        boolean saude[] = new boolean[9];
        String saudeDescricao[] = new String[5];
        saude[0] = ListarPesquisa.get(0).isSofreAlgumaDoenca();
        saude[1] = ListarPesquisa.get(0).isEmTratamentoMedico();
        saude[2] = ListarPesquisa.get(0).isUsoDeAlgumaMedicacao();
        saude[3] = ListarPesquisa.get(0).isPossuiAlergias();
        saude[4] = ListarPesquisa.get(0).isJaFoiOperado();
        saude[5] = ListarPesquisa.get(0).isProblemasComCicatrizacao();
        saude[6] = ListarPesquisa.get(0).isGravidez();
        saude[7] = ListarPesquisa.get(0).isProblemasComAnestesia();
        saude[8] = ListarPesquisa.get(0).isProblemasComHemorragia();
//----------------------
//saudeDescricao[0]=ListarPesquisa.get(0).getPrincipalQueixa();
        saudeDescricao[0] = ListarPesquisa.get(0).getSofreAlgumaDoencaDescricao();
        saudeDescricao[1] = ListarPesquisa.get(0).getEmTratamentoMedicoDescricao();
        saudeDescricao[2] = ListarPesquisa.get(0).getUsoDeAlgumaMedicacaoDescricao();
        saudeDescricao[3] = ListarPesquisa.get(0).getPossuiAlergiasDescricao();
        saudeDescricao[4] = ListarPesquisa.get(0).getJaFoiOperadoDescricao();
        DefaultTableModel valor = (DefaultTableModel) jTableSaude.getModel();//criando a chave valor para o objeto tabela
        if (saude[0] == true) {
            valor.addRow((new String[]{"DoenÃ§a: " + saudeDescricao[0]}));
        }
        if (saude[1] == true) {
            valor.addRow((new String[]{"Trat. MÃ©dico: " + saudeDescricao[1]}));
        }
        if (saude[2] == true) {
            valor.addRow((new String[]{"MedicaÃ§Ã£o: " + saudeDescricao[2]}));
        }
        if (saude[3] == true) {
            valor.addRow((new String[]{"Alergia:" + saudeDescricao[3]}));
        }
        if (saude[4] == true) {
            valor.addRow((new String[]{"OperaÃ§Ã£o: " + saudeDescricao[4]}));
        }
        jPrincipalQueixa.setText(ListarPesquisa.get(0).getPrincipalQueixa());

    }

    private void HabitosCigarro() throws ClassNotFoundException, SQLException {
        //Esta funÃ§Ã£o exibe os dados de consumo de cigarro, o ifs abaixo sao para concatenar todas as informaÃ§Ãµes em uma Ãºnica frase
        //
        sctp2.BancodeDados.conexao acesso = new sctp2.BancodeDados.conexao();
        ArrayList<sctp2.ClassesdeControle.Habitos> ListarPesquisa = new ArrayList<sctp2.ClassesdeControle.Habitos>();
        ListarPesquisa = acesso.ListarHabitosCigarro(iDpaciente);//funÃ§Ã£o que retorna quais necessidades do paciente
        if (ListarPesquisa.get(0).getFuma() == 1) {
            jFumante.setText("Fumante");
            //--------------------------------------------------
            if (ListarPesquisa.get(0).getFumaHaQuantoTempo() == 1) {
                jFumante.setText(jFumante.getText() + " a menos de um ano");
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 1) {
                    jFumante.setText(jFumante.getText() + " 1 a 10 cigarros ");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros)");
                    }
                }
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 2) {
                    jFumante.setText(jFumante.getText() + " de 10 a 20 cigarros \n");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros)");
                    }
                }
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 3) {
                    jFumante.setText(jFumante.getText() + " mais de 20  cigarros\n ");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros)");
                    }
                }

            } //------------------------------------------------------------------------------------
            else if (ListarPesquisa.get(0).getFumaHaQuantoTempo() == 2) {
                jFumante.setText(jFumante.getText() + " entre  1 e 10 anos \n");
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 1) {
                    jFumante.setText(jFumante.getText() + " de 1 a 10 cigarros ");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros)");
                    }
                }
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 2) {
                    jFumante.setText(jFumante.getText() + " de 10 a 20 cigarros \n ");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros)");
                    }
                }
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 3) {
                    jFumante.setText(jFumante.getText() + " mais 20 cigarros \n");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros)");
                    }
                }

            } //------------------------------------------------------------------------------------
            else if (ListarPesquisa.get(0).getFumaHaQuantoTempo() == 3) {
                jFumante.setText(jFumante.getText() + " a mais de 10 anos \n");
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 1) {
                    jFumante.setText(jFumante.getText() + " de 1 a 10 cigarros ");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros)");
                    }
                }
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 2) {
                    jFumante.setText(jFumante.getText() + " de 10 a 20 cigarros\n ");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros)");
                    }
                }
                //-------------------------------------
                if (ListarPesquisa.get(0).getFumoQuantidadePorDia() == 3) {
                    jFumante.setText(jFumante.getText() + " mais de 20 cigarros \n");
                    if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 1) {
                        jFumante.setText(jFumante.getText() + " Industrializado(s)");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 2) {
                        jFumante.setText(jFumante.getText() + " de Palha");
                    } else if (ListarPesquisa.get(0).getFumoTipodeCigarro() == 3) {
                        jFumante.setText(jFumante.getText() + " do tipo Outros");
                    }
                }
            }
            //------------------------------------------------------------------------------------

        } else {
            jFumante.setText("NÃ£o fuma");
        }
    }

    private void HabitosBebida() throws ClassNotFoundException {
        sctp2.BancodeDados.conexao acesso = new sctp2.BancodeDados.conexao();
        ArrayList<sctp2.ClassesdeControle.Habitos> ListarPesquisa = new ArrayList<sctp2.ClassesdeControle.Habitos>();
        ListarPesquisa = acesso.ListarHabitosBebida(iDpaciente);//funÃ§Ã£o que retorna quais necessidades do paciente

        if (ListarPesquisa.get(0).getBebidaAlcolica() == 1) {
            jBebida.setText("Bebe");
            if (ListarPesquisa.get(0).getBebidaAlcoolicaHaQuantoTempo() == 1) {
                jBebida.setText(" a menos de um ano");
                //bebe socialmente
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 1) {
                    jBebida.setText(jBebida.getText() + " socialmente");
                    //bebida destilada
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }
                //bebe semanalmente
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 2) {
                    jBebida.setText(jBebida.getText() + " semanalmente");
                    //bebida destilada
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }
                //bebe diariamente
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 3) {
                    jBebida.setText(jBebida.getText() + " diariamente");
                    //bebida destilada
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }

            }
            //-------------------------fim ha quanto tempo menos de um ano--------------------------
            if (ListarPesquisa.get(0).getBebidaAlcoolicaHaQuantoTempo() == 2) {
                jBebida.setText(" de 1 a 10 anos");
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 1) {
                    jBebida.setText(jBebida.getText() + " socialmente");
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }
                //bebe semanalmente
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 2) {
                    jBebida.setText(jBebida.getText() + " semanalmente");
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }
                //bebe diariamente
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 3) {
                    jBebida.setText(jBebida.getText() + " diariamente");
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }

            }
            //--------fim ha quanto tempo 1 a 10 anos-----------------------------------------
            if (ListarPesquisa.get(0).getBebidaAlcoolicaHaQuantoTempo() == 3) {
                jBebida.setText(" a mais de 10 anos");
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 1) {
                    jBebida.setText(jBebida.getText() + " socialmente");
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }
                //bebe semanalmente
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 2) {
                    jBebida.setText(jBebida.getText() + " semanalmente");
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }
                //bebe diariamente
                if (ListarPesquisa.get(0).getBebidaAlcoolicaFrequencia() == 3) {
                    jBebida.setText(jBebida.getText() + " diariamente");
                    if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 1) {
                        jBebida.setText(jBebida.getText() + " bebida destilada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 2) {
                        jBebida.setText(jBebida.getText() + " bebida Fermentada");
                    } else if (ListarPesquisa.get(0).getBebidaAlcoolicaTipodeBebida() == 3) {
                        jBebida.setText(jBebida.getText() + " bebida destilada e fermentada");
                    }
                }
            }
            //----------fim ha quanto tempo mais de 10 anos

        } else {
            jBebida.setText("NÃ£o bebe bebidas alcÃ³licas.");
        }

    }
}
