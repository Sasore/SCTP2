/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sctp2.Paciente;

import com.toedter.components.JTitlePanel;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import sctp2.BancodeDados.*;
import sctp2.ClassesdeControle.TratamentosNecessarios;

/**
 *
 * @author soare
 */
public class FinalizarTratamento extends javax.swing.JFrame {

    /**
     * Creates new form FinalizarTratamentpo
     */
    private static String rg;

    public FinalizarTratamento(String rg) throws ClassNotFoundException, SQLException {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);//inicia a janela maximizada
        this.rg = rg;
        this.setTitle("SCTP: Finalizar Tratamento");
        MostrarTratamentos(rg);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/left-arrow.png"))); // NOI18N
        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Finalizar tratamentos Selecionados");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 102, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Selecione os tratamentos que deseja finalizar");

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jTable1.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tratamento", "Selecionar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(15);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1248, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/detalhes.png"))); // NOI18N
        jMenu1.setText("Menu");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, 0));
        jMenuItem1.setText("Menu Principal");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1473476015_Close_Icon.png"))); // NOI18N
        jMenuItem2.setText("Sair");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        sctp2.Principal.principal acesso = new sctp2.Principal.principal();
        acesso.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DadosDoPaciente acesso;
        try {
            acesso = new DadosDoPaciente(rg);
            acesso.setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FinalizarTratamento.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            FinalizaTratamento();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FinalizarTratamento.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FinalizarTratamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalizarTratamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalizarTratamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalizarTratamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalizarTratamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FinalizarTratamento(rg).setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FinalizarTratamento.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(FinalizarTratamento.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void MostrarTratamentos(String rg) throws ClassNotFoundException, SQLException {
        sctp2.BancodeDados.conexao conexao = new sctp2.BancodeDados.conexao();
        ArrayList<TratamentosNecessarios> ListarTratamentos = new ArrayList<>();
        ListarTratamentos = conexao.NecessidadesdoPaciente(rg);//função que retorna quais necessidades do paciente
        int[] tratamento = new int[27];
        tratamento[0] = ListarTratamentos.get(0).getProfilaxiaSimples();
        tratamento[1] = ListarTratamentos.get(0).getRaspagemEPoliCCoronario();
        tratamento[2] = ListarTratamentos.get(0).getCirugiaPeridontal();
        tratamento[3] = ListarTratamentos.get(0).getExodontiaSimples();
        tratamento[4] = ListarTratamentos.get(0).getExodontia3Molar();
        tratamento[5] = ListarTratamentos.get(0).getExodontiaIncluso();
        tratamento[6] = ListarTratamentos.get(0).getAmalgama();
        tratamento[7] = ListarTratamentos.get(0).getResina();
        tratamento[8] = ListarTratamentos.get(0).getRmf();
        tratamento[9] = ListarTratamentos.get(0).getEndontiaUnirradicular();
        tratamento[10] = ListarTratamentos.get(0).getEndodontiaTrirradicular();
        tratamento[11] = ListarTratamentos.get(0).getCoroaTotal();
        tratamento[12] = ListarTratamentos.get(0).getPonteFixa3Elementos();
        tratamento[13] = ListarTratamentos.get(0).getPonteFixa4Elementos();
        tratamento[14] = ListarTratamentos.get(0).getPonteFixaMaisQue4Elementos();
        tratamento[15] = ListarTratamentos.get(0).getPpr();
        tratamento[16] = ListarTratamentos.get(0).getProtesetotal();
        tratamento[17] = ListarTratamentos.get(0).getProtese_ppr();
        tratamento[18] = ListarTratamentos.get(0).getProtese();
        tratamento[19] = ListarTratamentos.get(0).getTerrapiaOeriodDeSuporte();
        tratamento[20] = ListarTratamentos.get(0).getEndodontiaBirradicular();
        tratamento[21] = ListarTratamentos.get(0).getDtm();
        tratamento[22] = ListarTratamentos.get(0).getEstomatologia();
        tratamento[23] = ListarTratamentos.get(0).getPonteFixa();
        tratamento[24] = ListarTratamentos.get(0).getPonteFixaMaisQueTresElementos();
        tratamento[25] = ListarTratamentos.get(0).getRaspagemSub();
        tratamento[26] = ListarTratamentos.get(0).getRaspagemSupra();
        DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();//criando a chave valor para o objeto tabela
        //obs: AO ADICIONAR NOVOS TRATAMENTOS CERTIFIQUE-SE DE NÃO DEIXAR ESPAÇOS SOBRANDO
        if (tratamento[0] == 1) {
            valor.addRow((new String[]{"Profilaxia Simples"}));
        }
        if (tratamento[1] == 1) {
            valor.addRow((new String[]{"Raspagem e Poli. Coronário"}));
        }
        if (tratamento[2] == 1) {
            valor.addRow((new String[]{"Cirugia Peridontal"}));
        }
        if (tratamento[3] == 1) {
            valor.addRow((new String[]{"Exodontia Simples"}));
        }
        if (tratamento[4] == 1) {
            valor.addRow((new String[]{"Exodontia 3º Molar"}));
        }
        if (tratamento[5] == 1) {
            valor.addRow((new String[]{"Exodontia Incluso"}));
        }
        if (tratamento[6] == 1) {
            valor.addRow((new String[]{"Amalgama"}));
        }
        if (tratamento[7] == 1) {
            valor.addRow((new String[]{"Resina"}));
        }
        if (tratamento[8] == 1) {
            valor.addRow((new String[]{"RMF"}));
        }
        if (tratamento[9] == 1) {
            valor.addRow((new String[]{"EndontiaUnirradicular"}));
        }
        if (tratamento[10] == 1) {
            valor.addRow((new String[]{"Endodontia Trirradicular"}));
        }
        if (tratamento[11] == 1) {
            valor.addRow((new String[]{"Coroa Total"}));
        }
        if (tratamento[12] == 1) {
            valor.addRow((new String[]{"PonteFixa 3 Elementos"}));
        }
        if (tratamento[13] == 1) {
            valor.addRow((new String[]{"PonteFixa 4 Elementos"}));
        }
        if (tratamento[14] == 1) {
            valor.addRow((new String[]{"PonteFixaMaisQue 4 Elementos"}));
        }
        if (tratamento[15] == 1) {
            valor.addRow((new String[]{"PPR"}));
        }
        if (tratamento[16] == 1) {
            valor.addRow((new String[]{"Protese total"}));
        }
        if (tratamento[17] == 1) {
            valor.addRow((new String[]{"Protese PPR"}));
        }
        if (tratamento[18] == 1) {
            valor.addRow((new String[]{"Protese"}));
        }
        if (tratamento[19] == 1) {
            valor.addRow((new String[]{"Terapia Periodontal"}));
        }
        if (tratamento[20] == 1) {
            valor.addRow((new String[]{" Endodontia Birradicular"}));
        }
        if (tratamento[21] == 1) {
            valor.addRow((new String[]{"DTM"}));
        }
        if (tratamento[22] == 1) {
            valor.addRow((new String[]{"Estomatologia"}));
        }
        if (tratamento[23] == 1) {
            valor.addRow((new String[]{"Ponte Fixa"}));
        }
        if (tratamento[24] == 1) {
            valor.addRow((new String[]{"Ponte Fixa Mais Que Três Elementos"}));
        }
        if (tratamento[25] == 1) {
            valor.addRow((new String[]{"Raspagem Sub"}));
        }
        if (tratamento[26] == 1) {
            valor.addRow((new String[]{"Raspagem Supra"}));
        }

    }

    private void FinalizaTratamento() throws ClassNotFoundException, SQLException {
        conexao acesso = new conexao();
        int tamanho = (jTable1.getRowCount());
        int incrementa = 0;
        String[] tratamentosNVetor = new String[tamanho];
        for (int i = 0; i < tratamentosNVetor.length; i++) {
            tratamentosNVetor[i] = null;
        }

        for (int i = 0; i < tamanho; i++) {
            final Object valor = jTable1.getValueAt(i, 1);

            if (valor == null) {
                System.out.println("");
            } else {
                if (valor.toString().isEmpty()) {
                    System.out.println(" ");
                } else //System.out.println("valor "+jTable1.getValueAt(i,0).toString());
                {
                    tratamentosNVetor[incrementa] = jTable1.getValueAt(i, 0).toString();
                }
            }
            incrementa++;
        }
        for(int i=0;i<tratamentosNVetor.length;i++)System.out.println("tratamento: "+tratamentosNVetor[i]);
        String[] tratamentoconvertido;
        //for(int i=0;i<tratamentoconvertido.length;i++)tratamentoconvertido[i]=null;
        tratamentoconvertido=converteValores(tratamentosNVetor);//Esta função retorna o nome do tratamento na forma que está escrita no banco de dados
        for(int i=0;i<tratamentoconvertido.length;i++)System.out.println("tc "+tratamentoconvertido[i]);
        //acesso.FinalizaTratamento(tratamentoconvertido, rg);

    }

    private String[] converteValores(String[] tratamentosNVetor) {
        //-----------------------------------------------------------
        String[]tratamentoconvertido= new String[tratamentosNVetor.length];
        
        for(int i=0;i<tratamentoconvertido.length;i++)tratamentoconvertido[i]=null;
        for(int k=0;k<tratamentosNVetor.length;k++){
            
            if(tratamentosNVetor[k].trim().equals("Profilaxia Simples"))tratamentoconvertido[k]="nec_ProfilaxiaSimples";
            else
                if(tratamentosNVetor[k].trim().equals("Raspagem e Poli. Coronário"))tratamentoconvertido[k]="nec_RaspagemPolimentoCoronario";
            else
                    if(tratamentosNVetor[k].trim().equals("Cirugia Peridontal"))tratamentoconvertido[k]="nec_CirurgiaPeriodontal";
            else
                        if(tratamentosNVetor[k].trim().equals("Exodontia Simples"))tratamentoconvertido[k]="nec_ExodontiaSimples";
            else
                            if(tratamentosNVetor[k].trim().equals("Exodontia 3º Molar"))tratamentoconvertido[k]="nec_ExodontiaMolar";
            else
                                if(tratamentosNVetor[k].trim().equals("Exodontia Incluso"))tratamentoconvertido[k]="nec_ExodontiaIncluso";
            else
                                    if(tratamentosNVetor[k].trim().equals("Amalgama"))tratamentoconvertido[k]="nec_Amalgama";
            else
                                        if(tratamentosNVetor[k].trim().equals("Resina"))tratamentoconvertido[k]="nec_Resina";
            else
                                            if(tratamentosNVetor[k].trim().equals("RMF"))tratamentoconvertido[k]="nec_RMF";
            else
                                                if(tratamentosNVetor[k].trim().equals("EndontiaUnirradicular"))tratamentoconvertido[k]="nec_Endodontiauniebirradicular";
            else
                                                    if(tratamentosNVetor[k].trim().equals("Endodontia Trirradicular"))tratamentoconvertido[k]="nec_EndodontiaTrirradicular";
            else
                                                        if(tratamentosNVetor[k].trim().equals("Coroa Total"))tratamentoconvertido[k]="nec_CoroaTotal";
            else
                                                            if(tratamentosNVetor[k].trim().equals("PonteFixa 3 Elementos"))tratamentoconvertido[k]="nec_PonteFixa3Elementos";
            else
                                                                if(tratamentosNVetor[k].trim().equals("PonteFixa 4 Elementos"))tratamentoconvertido[k]="nec_Pontefixa4elementos";
            else
                                                                    if(tratamentosNVetor[k].trim().equals("PonteFixaMaisQue 4 Elementos"))tratamentoconvertido[k]="nec_Pontefixamaisque4elementos";
            else
                                                                        if(tratamentosNVetor[k].trim().equals("PPR"))tratamentoconvertido[k]="nec_PPR";
            else
                                                                            if(tratamentosNVetor[k].trim().equals("Protese total"))tratamentoconvertido[k]="nec_ProteseTotalPar";
            else
                                                                                if(tratamentosNVetor[k].trim().equals("Protese PPR"))tratamentoconvertido[k]="nec_ProtesePPR";
            else
                                                                                    if(tratamentosNVetor[k].trim().equals("Protese"))tratamentoconvertido[k]="nec_Protese";
            else
                                                                                        if(tratamentosNVetor[k].trim().equals("Terapia Periodontal"))tratamentoconvertido[k]="nec_TerapiaPeriodontal";
            else
                                                                                            if(tratamentosNVetor[k].trim().equals("Endodontia Birradicular"))tratamentoconvertido[k]="nec_EndodontiaBirradicular";
            else
                                                                                                if(tratamentosNVetor[k].trim().equals("DTM"))tratamentoconvertido[k]="nec_DTM";
            else
                                                                                                    if(tratamentosNVetor[k].trim().equals("Estomatologia"))tratamentoconvertido[k]="nec_Estomatologia";
            else
                                                                                                    if(tratamentosNVetor[k].trim().equals("Ponte Fixa"))tratamentoconvertido[k]="nec_PonteFixa";
            else
                                                                                                    if(tratamentosNVetor[k].trim().equals("Ponte Fixa Mais Que Três Elementos"))tratamentoconvertido[k]="nec_PonteFixaMaisQueTresElementos";
            else
                                                                                                    if(tratamentosNVetor[k].trim().equals("Raspagem Sub"))tratamentoconvertido[k]="nec_RaspagemSub";
            else
                                                                                                    if(tratamentosNVetor[k].trim().equals("Raspagem Supra"))tratamentoconvertido[k]="nec_RaspagemSupra";
            
            
            
        }       
        return tratamentoconvertido;
    }

}
